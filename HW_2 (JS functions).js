// HW_2 JS_functions
// 1) Сделать функцию которая при вызове напишет в консоль сумму 2-х переданных в неё чисел
function summa(s1, s2){
     console.log(s1 + s2);
}

summa(1, 2)

// 2) Сделать функцию которая вернёт в консоль квадрат переданного числа

function square(sq){
    return(console.log(sq ** 2));
}

square(9)

// 3) Сделать функцию. На вход принимет 3 параметра (Ф,И,О). Вернёт JSON
// {"name":И,
//  "surname":Ф,
//  "middlename":О}
function json(f,i,o){
    return(console.log(JSON.stringify({name:i, surname:f, middlename:o})));
}

json('И', 'Ф', 'О')

// // 4) вывести в консоль переменную-массив в которой будут все чётные числа. Переменную возвращяет функция которая на вход принимает массив чисел.
// // Если чётных чисел не нашлось, то функция вернёт текст "No even numbers"
function array(params){
    let counter = 0;
    for(i = 0; i<params.length; i++){
        if(params[i] % 2 == 0){
            console.log(params[i])
            counter++
        }
    }
    if(counter == 0){
        return(console.log("No even numbers"))
    }
}
var x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
array(x);

var y = [1, 3, 5]
array(y);

// // 5) Сделать функцию которая вернёт количество букв 'a' в переданном в неё слове.
// // Алфавит Eng. Если нету букв 'а', то вернтуть текст "No a characters".
function letter_a(word){
    let count = 0;
    for(i = 0; i<word.length; i++){
        if(word[i] == 'a'){
            count++
        }
    }
    if(count == 0){
        return(console.log("No a characters"));
    }else{
        return(console.log(count));
    }
}

letter_a("Characters");

// 6) Написать функцию которая выдаст список тестов для переданного в неё web-ui элемента
// Элементы: Phone number field, CheckBox, SignIn Button.
function list_tests(test){
    let phone_num = [
        '1. Убедитесь, что в поле номер мобильного телефона должен отображаться принятый формат номера мобильного телефона в качестве текста-заполнителя для помощи пользователю',
        '2. Добавьте действительный номер мобильного телефона и убедитесь, что в поле должен быть указан правильный номер мобильного телефона',
        '3. Убедитесь, что пользователь может скопировать и вставить номер мобильного телефона в поле или нет',
        '4. Поле "Проверить номер мобильного телефона" должно принимать только числовое значение путем ввода букв',
        '5. Поле "Подтвердить номер мобильного телефона" должно принимать только числовое значение путем ввода специального символа',
        '6. Подтвердите, введя меньший номер, чем фактический номер мобильного телефона',
        '7. Проверьте поведение, добавив больше цифр, чем фактический номер мобильного телефона',
        '8. Поле проверки допускает пробел между номером мобильного телефона или нет в соответствии с требованиями',
        '9. Проверьте сообщение об ошибке, отображаемое для пустого ввода номера мобильного телефона в поле',
        '10. Подтвердите, добавив только пробелы в поле Номер мобильного телефона',
        '11. Проверьте, сохранен ли правильный номер мобильного телефона в базе данных или нет, нажав на кнопку Сохранить или Далее',
        '12. Убедитесь, что номер мобильного телефона сохранен, нажав кнопку ввода после добавления номера мобильного телефона в поле',
        '13. Проверьте, отображаются ли флаги стран в поле Номер мобильного телефона или нет',
        '14. Проверьте с помощью флажков, отображается код страны или нет в поле Номер мобильного телефона'
    ];
    let CheckBox = [
        '1. Убедитесь, что флажок, присутствующий на веб-странице, находится в правильном положении',
        '2. Проверьте ширину и высоту флажка',
        '3. Проверьте радиус границы для флажка "Закругленный край" или "угловой край"',
        '4. Проверьте цвет галочки, установив флажок',
        '5. Убедитесь, что флажок установлен, щелкнув по нему мышью',
        '6. Убедитесь, что флажок установлен с клавиатуры',
        '7. Убедитесь, что пользователь может снять флажок, нажав на него',
        '8. Проверьте, может ли пользователь установить несколько флажков или нет',
        '9. Проверьте наличие текста метки с помощью флажка',
        '10. Проверьте, выровнен ли текст метки с флажком или нет',
        '11. Убедитесь, что на странице загрузки установлен самый первый флажок, установленный по умолчанию и показывающий знак галочки',
        '12. Проверьте, установлено ли значение флажка при нажатии на текст надписи или нет',
        '13. Проверьте правильность написания текста метки, выровненного по флажку',
        '14. Убедитесь, что один и тот же текст метки не повторяется с помощью флажков',
        '15. Проверьте порядок значений или текста метки с помощью флажков',
        '16. Проверьте, следует ли сохранять выбранные пользователем значения флажков в базе данных, нажав на кнопку Отправить или нет',
        '17. Флажок Проверить можно снять или нет, нажав на этот флажок после выбора',
        '18. Проверка проверки добавляется, если флажок не установлен, и нажмите на кнопку отправки , и должно появиться предупреждение или сообщение об ошибке',
    ];
    let SignIn_Button = [
        '1. Кнопка проверки присутствует на странице в соответствии с дизайном веб-страницы',
        '2. Убедитесь, что цвет кнопки соответствует дизайну',
        '3. Проверьте значок, добавленный на кнопку, если он добавлен в дизайн. например, загрузить или загрузить значок с кнопкой',
        '4. Проверьте, должен ли значок, добавленный на кнопку, совпадать с кнопкой и текстом кнопки или нет',
        '5. Проверьте ширину и высоту кнопки',
        '6. Проверьте, применен радиус границы к кнопке или нет',
        '7. Убедитесь, что ширина и высота кнопок, используемых на веб-сайте, совпадают или не соответствуют дизайну',
        '8. Проверьте текст кнопки, относящийся к функциональности инструмента на веб-странице',
        '9. Проверьте, включена кнопка / доступна для кликабельности или нет, нажав на кнопку',
        '10. Проверьте, изменился цвет при наведении курсора мыши или нет',
        '11. Убедитесь, что цвет, измененный при наведении курсора мыши, совпадает с дизайном',
        '12. Убедитесь, что пользователь может открыть ссылку на кнопку в новой вкладке, щелкнув правой кнопкой мыши по кнопке, отображается опция Открыть ссылку на новой вкладке или нет',
        '13. Проверьте, открывает ли нажатие кнопки Ctrl на клавиатуре и щелчок по кнопке новую вкладку или нет. Это должно соответствовать требованиям',
        '14. Убедитесь, что вся кнопка должна быть кликабельной, а не только текст кнопки',
        '15. Убедитесь, что значения, добавленные пользователем при нажатии на кнопку отправки, правильно сохранены в базе данных',
        '16. Убедитесь, что пользователю не должно быть разрешено нажимать на кнопку отправки формы / страницы несколько раз намеренно или непреднамеренно',
        '17. Проверьте, выполнено ли желаемое действие при нажатии на кнопку или нет',
        '18. Проверьте правильность написания текста кнопки или нет',
        '19. Проверьте, читаем ли текст кнопки или нет, проверив размер текста кнопки',
        '20. Цвет текста кнопки проверки должен быть виден на кнопке',
        '21. Проверьте семейство шрифтов, предоставленное реализацией дизайнера, или нет',
        '22. Убедитесь, что кнопка сброса должна устанавливать значения по умолчанию для всех полей'
    ];
    let val_test = test.toLowerCase().trim();
    if (val_test == 'phone number field'){
        for(i = 0; i < phone_num.length; ++i) {
            console.log(phone_num[i]);
        }    
    }else if(val_test == 'checkbox'){
        for(i = 0; i < CheckBox.length; ++i) {
            console.log(CheckBox[i]);
        }    
    }else if(val_test == 'signin button'){
        for(i = 0; i < SignIn_Button.length; ++i) {
            console.log(SignIn_Button[i]);
        }    
    }
}
list_tests('Phone number field')
list_tests('CheckBox')
list_tests('SignIn Button')

// 7) Написать функцию которая на вход получает JSON а возвращяет XML
function JSONtoXML(obj) {
    let xml = '';
    for (let prop in obj) {
      xml += obj[prop] instanceof Array ? '' : '\n<' + prop + '>';
      if (obj[prop] instanceof Array) {
        for (let array in obj[prop]) {
          xml += '<' + prop + '>';
          xml += JSONtoXML(new Object(obj[prop][array]));
          xml += '</' + prop + '>\n';
        }
      } else if (typeof obj[prop] == 'object') {
        xml += JSONtoXML(new Object(obj[prop]));
      } else {
        xml += obj[prop];
      }
      xml += obj[prop] instanceof Array ? '' : '</' + prop + '>\n';
    }
    xml = xml.replace('/<\/?[0-9]{1,}>/g', '');
    return xml;
  }
function jsonInXML (json){
let xml = JSONtoXML(json);
console.log(xml);
}

jsonInXML (js)

// function json_to_xml(json_obj) {
//     var xml = "<root>";
//     for (var key in json_obj) {
//         if (json_obj.hasOwnProperty(key)) {
//             xml += "<" + key + ">" + json_obj[key] + "</" + key + ">";
//         }
//     }
//     xml += "</root>";
//     return xml;
//   }
  
//   var json_obj = {name: "John", age: 30, city: "New York"};
//   console.log(json_to_xml(json_obj));